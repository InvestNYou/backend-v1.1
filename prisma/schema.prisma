// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  password      String?
  ageRange      String?
  financialGoal String?
  learningMode  String   @default("facts")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  progress      UserProgress?
  portfolio     UserPortfolio?
  transactions  PortfolioTransaction[]
  chatMessages  ChatMessage[]
  factCompletions FactCompletion[]
  lessonCompletions LessonCompletion[]
  quizAttempts  QuizAttempt[]
  unitTestAttempts UnitTestAttempt[]
  watchlist     Watchlist[]
  snapshots     PortfolioSnapshot[]

  @@map("users")
}

model UserProgress {
  id              String   @id @default(cuid())
  userId          String   @unique
  level           Int      @default(1)
  xp              Int      @default(0)
  streak          Int      @default(0)
  badges          Json     @default("[]")
  completedFacts  Json     @default("[]")
  completedLessons Json    @default("[]")
  lastActiveDate  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model DailyFact {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  category    String
  xpValue     Int      @default(25)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  completions FactCompletion[]

  @@map("daily_facts")
}

model FactCompletion {
  id        String    @id @default(cuid())
  userId    String
  factId    Int
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  fact DailyFact @relation(fields: [factId], references: [id], onDelete: Cascade)

  @@unique([userId, factId])
  @@map("fact_completions")
}

model Course {
  id           Int      @id @default(autoincrement())
  title        String   @unique
  description  String?
  lessonsCount Int      @default(0)
  thumbnail    String?
  color        String?
  isLocked     Boolean  @default(false)
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  units Unit[]
  unitTests UnitTest[]

  @@map("courses")
}

model Unit {
  id          Int      @id @default(autoincrement())
  courseId    Int
  title       String
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@unique([courseId, title])
  @@map("units")
}

model Lesson {
  id          Int      @id @default(autoincrement())
  unitId      Int
  title       String
  content     String
  order       Int      @default(0)
  xpValue     Int      @default(50)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  completions LessonCompletion[]
  quizzes Quiz[]

  @@map("lessons")
}

model LessonCompletion {
  id        String    @id @default(cuid())
  userId    String
  lessonId  Int
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_completions")
}

model Quiz {
  id          Int      @id @default(autoincrement())
  lessonId    Int
  title       String
  description String?
  type        String   // 'multiple_choice', 'free_response', 'mixed'
  questions   Json     // Array of question objects
  timeLimit   Int?     // Time limit in minutes
  passingScore Int     @default(70) // Percentage needed to pass
  xpValue     Int      @default(25)
  isActive  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attempts QuizAttempt[]

  @@map("quizzes")
}

model QuizAttempt {
  id        String    @id @default(cuid())
  userId    String
  quizId    Int
  answers   Json      // User's answers
  score     Int       // Percentage score
  passed    Boolean
  timeSpent Int?      // Time spent in seconds
  feedback  String?   // AI-generated feedback
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model UnitTest {
  id          Int      @id @default(autoincrement())
  courseId    Int
  title       String
  description String?
  questions   Json     // Array of question objects
  timeLimit   Int?     // Time limit in minutes
  passingScore Int     @default(80) // Percentage needed to pass
  xpValue     Int      @default(100)
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attempts UnitTestAttempt[]

  @@map("unit_tests")
}

model UnitTestAttempt {
  id        String    @id @default(cuid())
  userId    String
  testId    Int
  answers   Json      // User's answers
  score     Int       // Percentage score
  passed    Boolean
  timeSpent Int?      // Time spent in seconds
  feedback  String?   // AI-generated feedback
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  test UnitTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("unit_test_attempts")
}

model UserPortfolio {
  id         String   @id @default(cuid())
  userId     String   @unique
  balance    Decimal  @default(10000.00) @db.Decimal(10, 2)
  totalValue Decimal  @default(10000.00) @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_portfolios")
}

model PortfolioTransaction {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  shares    Decimal  @db.Decimal(10, 4)
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  type      String   // 'buy' or 'sell'
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_transactions")
}

model ChatMessage {
  id          String   @id @default(cuid())
  userId      String
  prompt      String   // User's original prompt/message
  response    String?  // AI response text
  model       String?  // AI model used (e.g., gpt-3.5-turbo, gpt-4)
  tokensUsed  Int?     // Number of tokens used in the request
  responseTime Int?    // Response time in milliseconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model StockData {
  id        String   @id @default(cuid())
  symbol    String   @unique
  name      String
  price     Decimal  @db.Decimal(10, 2)
  change    Decimal  @db.Decimal(10, 2)
  changePercent Decimal @db.Decimal(8, 2)
  updatedAt DateTime @updatedAt

  @@map("stock_data")
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String
  price     Decimal? @db.Decimal(10, 2)
  notes     String?
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("watchlist")
}

model PortfolioSnapshot {
  id           String   @id @default(cuid())
  userId       String
  date         DateTime @db.Date
  totalValue   Decimal  @db.Decimal(12, 2)
  balance      Decimal  @db.Decimal(12, 2)
  totalInvested Decimal @db.Decimal(12, 2)
  totalSold    Decimal  @db.Decimal(12, 2)
  dailyChange  Decimal  @db.Decimal(12, 2)
  dailyChangePercent Decimal @db.Decimal(8, 4)
  holdings     Json     // Array of holdings with current values
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("portfolio_snapshots")
}
